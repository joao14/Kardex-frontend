{"version":3,"sources":["webpack:///src/services/apis.service.ts"],"names":["AuthInfo","$uid","ApisService","http","authInfo$","UNKNOWN_USER","httpOptions","headers","error","ErrorEvent","console","message","status","email","password","credential","user","pass","log","post","login","JSON","stringify","pipe","handleError","toPromise","token","opt","Promise","resolve","reject","get","client","then","users","catch","addclient","put","updateclient","flowers","flower","addflowers","updateflowers","finca","addfinca","updatefinca","empresaCargo","delivery","addempresaCargo","updateempresaCargo","idCliente","marcaciones","mark","addmarcaciones","updatemarcaciones","url","body","header","set","order","JSON_to_URLEncoded","element","key","list","new_list","idx","push","encodeURIComponent","join"],"mappings":"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","file":"default~crm-clientes-clientes-module-ngfactory~crm-clientes-edit-edit-module-ngfactory~crm-delivery-~d498558d-es5.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, throwError, Observable } from \"rxjs\";\nimport { retry, catchError } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport {\n    HttpClient,\n    HttpHeaders,\n    HttpErrorResponse,\n} from \"@angular/common/http\";\nexport class AuthInfo {\n    constructor(public $uid: string) { }\n\n    isLoggedIn() {\n        return !!this.$uid;\n    }\n}\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class ApisService {\n    static UNKNOWN_USER = new AuthInfo(null);\n\n    public authInfo$: BehaviorSubject<AuthInfo> = new BehaviorSubject<AuthInfo>(\n        ApisService.UNKNOWN_USER\n    );\n    constructor(\n        private http: HttpClient\n    ) { }\n\n    /** Http Options */\n    httpOptions = {\n        headers: new HttpHeaders({\n            \"Content-Type\": \"application/json\",\n        }),\n    };\n\n    /** Captura de errores */\n    handleError(error: HttpErrorResponse) {\n        if (error.error instanceof ErrorEvent) {\n            // A client-side or network error occurred. Handle it accordingly.\n            console.error(\"An error occurred:\", error.error.message);\n        } else {\n            // The backend returned an unsuccessful response code.\n            // The response body may contain clues as to what went wrong,\n            console.error(\n                `Backend returned code ${error.status}, ` + `body was: ${error.error}`\n            );\n        }\n        // return an observable with a user-facing error message\n        return throwError(\"Something bad happened; please try again later.\");\n    }\n\n\n    public login(email: string, password: string): Promise<any> {\n        let credential = {\n            user: email,\n            pass: password,\n        };\n        console.log(credential);\n        return this.http\n            .post<any>(\n                environment.login,\n                JSON.stringify(credential),\n                this.httpOptions\n            )\n            .pipe(retry(2), catchError(this.handleError)).toPromise();\n    }\n\n    public getclients(token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.client, opt).toPromise().then(users => {\n                resolve(users);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public addclient(client: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addclient, client, opt).toPromise().then(users => {\n                resolve(users);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updateclient(client: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updateclient, client, opt).toPromise().then(users => {\n                resolve(users);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n\n    public getflowers(token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.flowers, opt).toPromise().then(flowers => {\n                resolve(flowers);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public addflowers(flower: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addflowers, flower, opt).toPromise().then(flower => {\n                resolve(flower);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updateflower(flower: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updateflowers, flower, opt).toPromise().then(flower => {\n                resolve(flower);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n\n    public getfinca(token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.finca, opt).toPromise().then(finca => {\n                resolve(finca);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public addfinca(finca: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addfinca, finca, opt).toPromise().then(finca => {\n                resolve(finca);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updatefinca(finca: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updatefinca, finca, opt).toPromise().then(finca => {\n                resolve(finca);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public getdeliveries(token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.empresaCargo, opt).toPromise().then(delivery => {\n                resolve(delivery);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public adddelivery(delivery: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addempresaCargo, delivery, opt).toPromise().then(delivery => {\n                resolve(delivery);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updatedelivery(delivery: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updateempresaCargo, delivery, opt).toPromise().then(delivery => {\n                resolve(delivery);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public getmarks(idCliente: number, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.marcaciones + idCliente, opt).toPromise().then(mark => {\n                resolve(mark);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public addmark(mark: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addmarcaciones, mark, opt).toPromise().then(mark => {\n                resolve(mark);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updatemark(mark: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updatemarcaciones, mark, opt).toPromise().then(mark => {\n                resolve(mark);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n\n\n\n\n    httpPost(url, body) {\n        const header = {\n            headers: new HttpHeaders()\n                .set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n            //.set(\"Authorization\", `Bearer ${environment.stripe.sk}`),\n        };\n        const order = this.JSON_to_URLEncoded(body);\n        console.log(order);\n        return this.http.post(url, order, header);\n    }\n\n    httpGet(url) {\n        const header = {\n            headers: new HttpHeaders()\n                .set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n            //.set(\"Authorization\", `Bearer ${environment.stripe.sk}`),\n        };\n\n        return this.http.get(url, header);\n    }\n\n    JSON_to_URLEncoded(element, key?, list?) {\n        let new_list = list || [];\n        if (typeof element == \"object\") {\n            for (let idx in element) {\n                this.JSON_to_URLEncoded(\n                    element[idx],\n                    key ? key + \"[\" + idx + \"]\" : idx,\n                    new_list\n                );\n            }\n        } else {\n            new_list.push(key + \"=\" + encodeURIComponent(element));\n        }\n        return new_list.join(\"&\");\n    }\n}\n"]}