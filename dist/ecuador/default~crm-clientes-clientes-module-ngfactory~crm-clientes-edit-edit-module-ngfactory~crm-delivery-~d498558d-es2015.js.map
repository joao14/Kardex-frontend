{"version":3,"sources":["./src/services/apis.service.ts"],"names":[],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACZ;AACQ;AAK7B;;;AACvB,MAAM,QAAQ;IACjB,YAAmB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;IAAI,CAAC;IAEpC,UAAU;QACN,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IACvB,CAAC;CACJ;AAKM,MAAM,WAAW;IAMpB,YACY,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAJrB,cAAS,GAA8B,IAAI,oDAAe,CAC7D,WAAW,CAAC,YAAY,CAC3B,CAAC;QAKF,mBAAmB;QACnB,gBAAW,GAAG;YACV,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;aACrC,CAAC;SACL,CAAC;IAPE,CAAC;IASL,yBAAyB;IACzB,WAAW,CAAC,KAAwB;QAChC,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACnC,kEAAkE;YAClE,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC5D;aAAM;YACH,sDAAsD;YACtD,6DAA6D;YAC7D,OAAO,CAAC,KAAK,CACT,yBAAyB,KAAK,CAAC,MAAM,IAAI,GAAG,aAAa,KAAK,CAAC,KAAK,EAAE,CACzE,CAAC;SACL;QACD,wDAAwD;QACxD,OAAO,uDAAU,CAAC,iDAAiD,CAAC,CAAC;IACzE,CAAC;IAGM,KAAK,CAAC,KAAa,EAAE,QAAgB;QACxC,IAAI,UAAU,GAAG;YACb,IAAI,EAAE,KAAK;YACX,IAAI,EAAE,QAAQ;SACjB,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC,IAAI;aACX,IAAI,CACD,wEAAW,CAAC,KAAK,EACjB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAC1B,IAAI,CAAC,WAAW,CACnB;aACA,IAAI,CAAC,4DAAK,CAAC,CAAC,CAAC,EAAE,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IAClE,CAAC;IAEM,UAAU,CAAC,KAAa;QAC3B,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACjE,OAAO,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IAEP,CAAC;IAEM,SAAS,CAAC,MAAW,EAAE,KAAa;QACvC,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,wEAAW,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC7E,OAAO,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,YAAY,CAAC,MAAW,EAAE,KAAa;QAC1C,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,YAAY,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC/E,OAAO,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAGM,UAAU,CAAC,KAAa;QAC3B,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBACpE,OAAO,CAAC,OAAO,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IAEP,CAAC;IAEM,UAAU,CAAC,MAAW,EAAE,KAAa;QACxC,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,wEAAW,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBAC/E,OAAO,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,YAAY,CAAC,MAAW,EAAE,KAAa;QAC1C,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACjF,OAAO,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAGM,QAAQ,CAAC,KAAa;QACzB,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAChE,OAAO,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IAEP,CAAC;IAEM,QAAQ,CAAC,KAAU,EAAE,KAAa;QACrC,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,wEAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC3E,OAAO,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,WAAW,CAAC,KAAU,EAAE,KAAa;QACxC,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,WAAW,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC7E,OAAO,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,aAAa,CAAC,KAAa;QAC9B,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAC1E,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IAEP,CAAC;IAEM,WAAW,CAAC,QAAa,EAAE,KAAa;QAC3C,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,wEAAW,CAAC,eAAe,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACxF,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,cAAc,CAAC,QAAa,EAAE,KAAa;QAC9C,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,kBAAkB,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAC1F,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,QAAQ,CAAC,SAAiB,EAAE,KAAa;QAC5C,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,WAAW,GAAG,SAAS,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACjF,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IAEP,CAAC;IAEM,OAAO,CAAC,IAAS,EAAE,KAAa;QACnC,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,wEAAW,CAAC,cAAc,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC/E,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,UAAU,CAAC,IAAS,EAAE,KAAa;QACtC,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACrB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAG,KAAK;aACrC,CAAC;SACL;QACD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wEAAW,CAAC,iBAAiB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACjF,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAMD,QAAQ,CAAC,GAAG,EAAE,IAAI;QACd,MAAM,MAAM,GAAG;YACX,OAAO,EAAE,IAAI,gEAAW,EAAE;iBACrB,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC;YAC7D,2DAA2D;SAC9D,CAAC;QACF,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED,OAAO,CAAC,GAAG;QACP,MAAM,MAAM,GAAG;YACX,OAAO,EAAE,IAAI,gEAAW,EAAE;iBACrB,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC;YAC7D,2DAA2D;SAC9D,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,kBAAkB,CAAC,OAAO,EAAE,GAAI,EAAE,IAAK;QACnC,IAAI,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;QAC1B,IAAI,OAAO,OAAO,IAAI,QAAQ,EAAE;YAC5B,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;gBACrB,IAAI,CAAC,kBAAkB,CACnB,OAAO,CAAC,GAAG,CAAC,EACZ,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,EACjC,QAAQ,CACX,CAAC;aACL;SACJ;aAAM;YACH,QAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;SAC1D;QACD,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;;AA9UM,wBAAY,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC","file":"default~crm-clientes-clientes-module-ngfactory~crm-clientes-edit-edit-module-ngfactory~crm-delivery-~d498558d-es2015.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, throwError, Observable } from \"rxjs\";\nimport { retry, catchError } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport {\n    HttpClient,\n    HttpHeaders,\n    HttpErrorResponse,\n} from \"@angular/common/http\";\nexport class AuthInfo {\n    constructor(public $uid: string) { }\n\n    isLoggedIn() {\n        return !!this.$uid;\n    }\n}\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class ApisService {\n    static UNKNOWN_USER = new AuthInfo(null);\n\n    public authInfo$: BehaviorSubject<AuthInfo> = new BehaviorSubject<AuthInfo>(\n        ApisService.UNKNOWN_USER\n    );\n    constructor(\n        private http: HttpClient\n    ) { }\n\n    /** Http Options */\n    httpOptions = {\n        headers: new HttpHeaders({\n            \"Content-Type\": \"application/json\",\n        }),\n    };\n\n    /** Captura de errores */\n    handleError(error: HttpErrorResponse) {\n        if (error.error instanceof ErrorEvent) {\n            // A client-side or network error occurred. Handle it accordingly.\n            console.error(\"An error occurred:\", error.error.message);\n        } else {\n            // The backend returned an unsuccessful response code.\n            // The response body may contain clues as to what went wrong,\n            console.error(\n                `Backend returned code ${error.status}, ` + `body was: ${error.error}`\n            );\n        }\n        // return an observable with a user-facing error message\n        return throwError(\"Something bad happened; please try again later.\");\n    }\n\n\n    public login(email: string, password: string): Promise<any> {\n        let credential = {\n            user: email,\n            pass: password,\n        };\n        console.log(credential);\n        return this.http\n            .post<any>(\n                environment.login,\n                JSON.stringify(credential),\n                this.httpOptions\n            )\n            .pipe(retry(2), catchError(this.handleError)).toPromise();\n    }\n\n    public getclients(token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.client, opt).toPromise().then(users => {\n                resolve(users);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public addclient(client: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addclient, client, opt).toPromise().then(users => {\n                resolve(users);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updateclient(client: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updateclient, client, opt).toPromise().then(users => {\n                resolve(users);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n\n    public getflowers(token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.flowers, opt).toPromise().then(flowers => {\n                resolve(flowers);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public addflowers(flower: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addflowers, flower, opt).toPromise().then(flower => {\n                resolve(flower);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updateflower(flower: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updateflowers, flower, opt).toPromise().then(flower => {\n                resolve(flower);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n\n    public getfinca(token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.finca, opt).toPromise().then(finca => {\n                resolve(finca);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public addfinca(finca: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addfinca, finca, opt).toPromise().then(finca => {\n                resolve(finca);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updatefinca(finca: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updatefinca, finca, opt).toPromise().then(finca => {\n                resolve(finca);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public getdeliveries(token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.empresaCargo, opt).toPromise().then(delivery => {\n                resolve(delivery);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public adddelivery(delivery: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addempresaCargo, delivery, opt).toPromise().then(delivery => {\n                resolve(delivery);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updatedelivery(delivery: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updateempresaCargo, delivery, opt).toPromise().then(delivery => {\n                resolve(delivery);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public getmarks(idCliente: number, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.get<any>(environment.marcaciones + idCliente, opt).toPromise().then(mark => {\n                resolve(mark);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n\n    }\n\n    public addmark(mark: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.post<any>(environment.addmarcaciones, mark, opt).toPromise().then(mark => {\n                resolve(mark);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n    public updatemark(mark: any, token: string): Promise<any> {\n        let opt = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            })\n        }\n        return new Promise<any>((resolve, reject) => {\n            this.http.put<any>(environment.updatemarcaciones, mark, opt).toPromise().then(mark => {\n                resolve(mark);\n            }).catch(error => {\n                reject(error);\n            })\n        });\n    }\n\n\n\n\n\n    httpPost(url, body) {\n        const header = {\n            headers: new HttpHeaders()\n                .set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n            //.set(\"Authorization\", `Bearer ${environment.stripe.sk}`),\n        };\n        const order = this.JSON_to_URLEncoded(body);\n        console.log(order);\n        return this.http.post(url, order, header);\n    }\n\n    httpGet(url) {\n        const header = {\n            headers: new HttpHeaders()\n                .set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n            //.set(\"Authorization\", `Bearer ${environment.stripe.sk}`),\n        };\n\n        return this.http.get(url, header);\n    }\n\n    JSON_to_URLEncoded(element, key?, list?) {\n        let new_list = list || [];\n        if (typeof element == \"object\") {\n            for (let idx in element) {\n                this.JSON_to_URLEncoded(\n                    element[idx],\n                    key ? key + \"[\" + idx + \"]\" : idx,\n                    new_list\n                );\n            }\n        } else {\n            new_list.push(key + \"=\" + encodeURIComponent(element));\n        }\n        return new_list.join(\"&\");\n    }\n}\n"],"sourceRoot":"webpack:///"}